#!/usr/bin/php
<?php
/**
 * =====================================
 *
 *             React Helper
 *
 * =====================================
 * Auhtor    : Mahmoud Abdelfadeil
 * Email     : mahmoudhasan.dev@gmail.com
 * Job Title : Back-end developer
 * Githib    : https://github.com/M-H-Abdelfadeil
 * Linkdin   : https://www.linkedin.com/in/m-abdelfadeil
 *
 */
if ($argc == 1) {
    //  check write helper command 
    echo textDanger("This is not available in the application. \n You can choose from this list");
    echo "\n\n\n";
    echo textSuccess(" 1- make:component  component path EX :  Products/CreateProduct ");
    echo "\n\n";
    echo textSuccess(" 2- make:slice  alice path EX :  Products/CreateProduct ");
    echo "\n";

} else {

    if ($argv[1] == "make:component") {
        hanldeMakeComponent($argv);
    } elseif ($argv[1] == "make:slice") {
        handleMakeSlice($argv);
    } else {
        echo textDanger("This is not available in the application. \n You can choose from this list");
        echo "\n\n\n";
        echo textSuccess(" 1- make:component  component path EX :  Products/CreateProduct ");
        echo "\n\n";
        echo textSuccess(" 2- make:slice  alice path EX :  Products/CreateProduct ");
        echo "\n";
    }

}

function textFunctionComponent($componentName)
{

    return "function $componentName (props){
    return (
        <>
           
        </>
    );
}

export default $componentName;";
}

function textFunctionSlice($componentName)
{
    $name = $componentName ."Slice";

    return "import { createSlice } from '@reduxjs/toolkit'

 
    
    export const ".$componentName ."Slice = createSlice({
      name: '$name',
      initialState:{
        // state 
      }
      ,
      reducers: {
        
      },
    })
    
    export const { } = ".$componentName."Slice.actions
    
    export default ".$componentName."Slice.reducer";
}

function textClassComponent($componentName)
{
    return "import React from 'react';

class $componentName extends React.Component {

    constructor(props) {
        super(props);
        this.state = {};
    }
    render() {
        return (
            <>
                
            </>
        );
    }
}

export default $componentName;

    ";

}

function createDirectory($path)
{
    $directory = explode("/", $path);

    $pathDir = "";
    foreach ($directory as $key => $value) {
        if ($key != count($directory) - 1) {

            if ($key == 0) {
                if (!file_exists($value)) {
                    mkdir($value);
                }
                $pathDir .= $value;

            } else {
                $pathDir .= "/" . $value;
                // $value ."\n";
                $dir = "";
                for ($i = 0; $i < $key; $i++) {
                    $dir .= $directory[$i] . "/";
                    //echo $i . "\n";
                }
                $dir .= $value;
                if (!file_exists($dir)) {
                    mkdir($dir);
                }
            }

        }
    }

    return $pathDir;

}

function getfileName($path)
{
    $path = explode("/", $path);
    return $path[count($path) - 1];
}

function textDanger($string)
{
    return "\033[41m" . "\033[1;37m" . $string . "\033[0m";
}
function textWarning($string)
{
    return "\033[43m" . "\033[1;37m" . $string . "\033[0m";
}
function textSuccess($string)
{
    return "\033[42m" . "\033[1;37m" . $string . "\033[0m";
}

function hanldeMakeComponent($argv)
{
    if (isset($argv[2])) {
        $componentPath = $argv[2];
        if (!file_exists($componentPath . ".js")) {
            $path = createDirectory($componentPath);
            $path = $path ? $path . "/" : "";
            $componentName = getFileName($componentPath);
            $component = fopen($path . $componentName . ".js", "w");
            $text = textFunctionComponent($componentName);
            if(isset($argv[3]) && $argv[3]=="--class"){
                $text = textClassComponent($componentName);
            }
            fwrite($component, $text);
            echo "\n\n" . textSuccess("The component ") . textWarning($componentName) . textSuccess(" was created successfully") . "\n\n";
        } else {
            echo textWarning("This component already exists");
        }

    } else {
        echo textDanger("Write the cmponent name");
    }
}

function handleMakeSlice($argv)
{
if (isset($argv[2])) {
        $componentPath = $argv[2];
        if (!file_exists($componentPath . ".js")) {
            $path = createDirectory($componentPath);
            $path = $path ? $path . "/" : "";
            $componentName = getFileName($componentPath);
            $component = fopen($path . $componentName . "Slice.js", "w");
            $text = textFunctionSlice($componentName);
            
            fwrite($component, $text);
            echo "\n\n" . textSuccess("The slice ") . textWarning($componentName) . textSuccess(" was created successfully") . "\n\n";
        } else {
            echo textWarning("This slice already exists");
        }

    } else {
        echo textDanger("Write the slice name");
    }
}
